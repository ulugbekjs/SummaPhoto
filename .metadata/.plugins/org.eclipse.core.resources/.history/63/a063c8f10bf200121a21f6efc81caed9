package ActivationManager;

import java.util.LinkedList;
import java.util.Queue;
import Common.Photo;

public class ActivationManagerThread {

	private static final ActivationManagerThread instance = null;
	
	//states
	private static final int REGULAR_MODE = 0;
	private static final int DEDICATED_MODE = 1;
	private static final int BUFFER_SIZE = 100;
	private static final int NEW_CANDIDATE_THRESHOLD_SCORE = 5;
	
	//instance fields
	private Queue<Photo> buffer = new LimitedLinkedList<Photo>(BUFFER_SIZE);
	private int currentState = 0;
	
	private ActivationManagerThread() {
	}

	public static ActivationManagerThread getInstance() {
		return instance;
	}
	
	private int calculateVector() {
		
	}
	private boolean isNewEventCandidate() {
		if ()
	}
	
	public boolean processIncomingPhoto(Photo photo) {
		
		double 
		if (EventCandidateContainer.getInstance().isEmpty() || )  // empty candidate container
			EventCandidate event = new EventCandidate(photo);
			
			EventCandidateContainer.getInstance();
		}
		return false;
		
	}
	
	
	

}
