package Bing;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.UUID;

import javax.media.j3d.PointSound;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.hamcrest.core.Is;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.sun.corba.se.spi.activation._ActivatorImplBase;
import com.sun.xml.internal.txw2.Document;

import Common.Point;

public class BingServices {

	public static StaticMap getStaticMap(Point[] points) {

		StaticMap map = new StaticMap();
		//get jpeg
		getStaticMapOrMetadataFile(map, false, points);
		// get metadata
		getStaticMapOrMetadataFile(map, true, points);
	}


	private static void getStaticMapOrMetadataFile(StaticMap map, boolean metadata, Point[] points) {


		try {

			URL                 url;
			URLConnection   urlConn;
			DataOutputStream    printout;
			DataInputStream     input;

			//Make the actual connection
			if (metadata) {
				url = new URL("http://dev.virtualearth.net/REST/v1/Imagery/Map/AerialWithLabels?mmd=1&o=xml&mapSize=700,600&dcl=1&key=AjuPzlE1V8n1TJJK7T7elqCZlfi6wdLGvjyYUn2aUsNJ5ORSwnc-ygOwBvTa9Czt");
			}
			else {
				url = new URL("http://dev.virtualearth.net/REST/v1/Imagery/Map/AerialWithLabels?mmd=0&mapSize=700,600&dcl=1&key=AjuPzlE1V8n1TJJK7T7elqCZlfi6wdLGvjyYUn2aUsNJ5ORSwnc-ygOwBvTa9Czt");
			}
			urlConn = url.openConnection();
			urlConn.setDoInput (true);
			urlConn.setDoOutput (true);
			urlConn.setUseCaches (false);
			urlConn.setRequestProperty("Content-Type", "text/plain");
			urlConn.setRequestProperty("charset",  "charset=utf-8");

			StringBuilder builder = new StringBuilder();

			for (Point point : points)  {
				builder.append("pp=");
				builder.append(point.toString());
				builder.append(";14;\r\n");
			}

			String strContent = builder.toString();

			urlConn.setRequestProperty("Content-Length", new Integer(strContent.getBytes().length).toString()); 
			printout = new DataOutputStream (urlConn.getOutputStream ());
			printout.writeBytes (strContent);
			printout.flush ();

			// Get response
			File file = null;

			input = new DataInputStream (urlConn.getInputStream());
			int bt = -1;
			if (!metadata) {
				// TODO: make jpg data work with imageIO and not with file
				file = new File("./moshe.jpg");
			}
			else {
				file = new File("./moshe.xml");
			}

			FileOutputStream fop = new FileOutputStream(file);
			// if file doesnt exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			while ((bt = input.read()) > -1) {
				fop.write(bt);	
			}

			if (!metadata) {
				map.setJpgPath(file.getPath());
			}
			else {
				
			}

			fop.flush();
			fop.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}   

		return file;
	}
}

