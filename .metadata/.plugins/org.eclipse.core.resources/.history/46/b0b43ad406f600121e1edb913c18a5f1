package Bing;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.List;
import java.util.UUID;

import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import com.sun.media.sound.InvalidFormatException;

import Common.BoundingBox;
import Common.Point;

public class BingServices {

	public static StaticMap getStaticMap(Point[] points) {

		StaticMap map = new StaticMap();
		//get jpeg
		getStaticMapOrMetadataFile(map, false, points);
		// get metadata
		getStaticMapOrMetadataFile(map, true, points);
	}


	private static void getStaticMapOrMetadataFile(StaticMap map, boolean metadata, Point[] points) {


		try {

			URL                 url;
			URLConnection   urlConn;
			DataOutputStream    printout;
			DataInputStream     input;

			//Make the actual connection
			if (metadata) {
				url = new URL("http://dev.virtualearth.net/REST/v1/Imagery/Map/AerialWithLabels?mmd=1&o=xml&mapSize=700,600&dcl=1&key=AjuPzlE1V8n1TJJK7T7elqCZlfi6wdLGvjyYUn2aUsNJ5ORSwnc-ygOwBvTa9Czt");
			}
			else {
				url = new URL("http://dev.virtualearth.net/REST/v1/Imagery/Map/AerialWithLabels?mmd=0&mapSize=700,600&dcl=1&key=AjuPzlE1V8n1TJJK7T7elqCZlfi6wdLGvjyYUn2aUsNJ5ORSwnc-ygOwBvTa9Czt");
			}
			urlConn = url.openConnection();
			urlConn.setDoInput (true);
			urlConn.setDoOutput (true);
			urlConn.setUseCaches (false);
			urlConn.setRequestProperty("Content-Type", "text/plain");
			urlConn.setRequestProperty("charset",  "charset=utf-8");

			StringBuilder builder = new StringBuilder();

			for (Point point : points)  {
				builder.append("pp=");
				builder.append(point.toString());
				builder.append(";14;\r\n");
			}

			String strContent = builder.toString();

			urlConn.setRequestProperty("Content-Length", new Integer(strContent.getBytes().length).toString()); 
			printout = new DataOutputStream (urlConn.getOutputStream ());
			printout.writeBytes (strContent);
			printout.flush ();

			// Get response
			File file = null;

			input = new DataInputStream (urlConn.getInputStream());
			int bt = -1;
			if (!metadata) {
				// TODO: make jpg data work with imageIO and not with file
				file = new File("./moshe.jpg");
			}
			else {
				file = new File("./moshe.xml");
			}

			FileOutputStream fop = new FileOutputStream(file);
			// if file doesnt exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}

			while ((bt = input.read()) > -1) {
				fop.write(bt);	
			}

			if (!metadata) {
				map.setJpgPath(file.getPath());
			}
			else {

			}

			fop.flush();
			fop.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}   

		return file;
	}

	private void fillStaticMapWithData(File xmlFile, StaticMap map) {
		SAXBuilder builder = new SAXBuilder();

		try {

			Document document = (Document) builder.build(xmlFile);
			Element rootNode = document.getRootElement();

			Element node = rootNode.getChild("StatusCode");
			if (node.getText() != "200") {
				throw new InvalidFormatException();
			}

			// traverse to metadata node
			Element metaNode = node.getChild("ResourceSets").getChild("ResourceSet").getChild("Resources").getChild("StaticMapMetadata");

			node = metaNode.getChild("BoundingBox");
			double SouthLatitude = new Double(node.getChildText("SouthLatitude"));
			double WestLongitude = new Double(node.getChildText("WestLongitude"));
			double NorthLatitude = new Double(node.getChildText("NorthLatitude"));
			double EastLongitude = new Double(node.getChildText("EastLongitude"));

			BoundingBox box = new BoundingBox(new Point(NorthLatitude, WestLongitude), 
					new Point(EastLongitude, SouthLatitude));
			map.setBox(box);

			node = metaNode.getChild("MapCenter");
			double latitude = new Double(node.getChildText("Latitude"));
			double longitude = new Double(node.getChildText("Longitude"));
			
			Point center = new Point(latitude, longitude);
			map.setCenterPoint(center);
						
			List<Element> list =  metaNode.getChildren("Pushpins");

			for (int i = 0; i < list.size(); i++) {

				Element pushpinNode = (Element) list.get(i);

				node = metaNode.getChild("Point");
				latitude = new Double(node.getChildText("Latitude"));	
				longitude = new Double(node.getChildText("Longitude")); 
				
				node = metaNode.getChild("Anchor");
				double x =  new Double(node.getChildText("X"));	
				double y =  new Double(node.getChildText("Y"));	

				node = metaNode.getChild("TopLeftOffset");
				x =  new Double(node.getChildText("X"));	
				y =  new Double(node.getChildText("Y"));	

				node = metaNode.getChild("BottomRightOffset");
				x =  new Double(node.getChildText("X"));	
				y =  new Double(node.getChildText("Y"));	
				System.out.println("First Name : " + node.getChildText("firstname"));
				System.out.println("Last Name : " + node.getChildText("lastname"));
				System.out.println("Nick Name : " + node.getChildText("nickname"));
				System.out.println("Salary : " + node.getChildText("salary"));

			}

		} catch (IOException io) {
			System.out.println(io.getMessage());
		} catch (JDOMException jdomex) {
			System.out.println(jdomex.getMessage());
		}
	}
}
}

