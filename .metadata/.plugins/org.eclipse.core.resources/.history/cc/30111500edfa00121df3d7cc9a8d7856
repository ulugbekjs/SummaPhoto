package Partitioning;

import java.util.LinkedList;
import java.util.List;

import android.R.integer;
import Common.*;


public class DBScan {
	
	/*Parameters for deciding weather two pictures are "close" to each other as part
	 * of the DBScan algorithm
	 */
	private  final double MaxSecondsInterval = 600;	
	private  final double MaxMetersInterval = 50; 
	private  final int minNumberOfPointsInCluster = 2;
	
	private List<PhotoObjectForClustering> unvisitedPhotos = null;
	private List<PhotoObjectForClustering> visitedPhotos = null;
	
	
	public DBScan (List<Photo> photosData)
	{
		unvisitedPhotos = new LinkedList<DBScan.PhotoObjectForClustering>();
		if (photosData != null)
		{
			for (Photo p: photosData)
			{
				unvisitedPhotos.add(new PhotoObjectForClustering(p));
			}
		}
		visitedPhotos = new LinkedList<DBScan.PhotoObjectForClustering>();
	}
	
	public List<Cluster> runAlgorithmClusters ()
	{
		
		while (!unvisitedPhotos.isEmpty())
		{
			PhotoObjectForClustering p = unvisitedPhotos.get(0);
			unvisitedPhotos.remove(0);
			p.isVisited = true;
			visitedPhotos.add(p);
			List<PhotoObjectForClustering>neighborsList = regionQueryList(p);
			if (neighborsList.size() < minNumberOfPointsInCluster)
			{
				p.isNoise = true;
			}
			else
			{
				Cluster cluster = new Cluser();
			}
			
		}
	}
	private boolean isEpsilonDistanced (PhotoObjectForClustering p1, PhotoObjectForClustering p2)
	{
		if ((p1.distanceFrom(p2) < MaxMetersInterval) && (p1.timeDeltaInSecondsFrom(p2) < MaxSecondsInterval))
				return true;
		return false;
	}
	
	private List<PhotoObjectForClustering> regionQueryList (PhotoObjectForClustering p)
	{
		List<PhotoObjectForClustering> photosEpsilonClose = new LinkedList<PhotoObjectForClustering>();
		for (PhotoObjectForClustering photoCandidate : unvisitedPhotos) {
			if (isEpsilonDistanced(p, photoCandidate))
			{
				photosEpsilonClose.add(photoCandidate);
			}
			
		}
		for (PhotoObjectForClustering photoCandidate : visitedPhotos) {
			if ((photoCandidate != null) && (isEpsilonDistanced(p, photoCandidate)))
			{
				photosEpsilonClose.add(photoCandidate);
			}
		}
		return photosEpsilonClose;
	}
	
	private class PhotoObjectForClustering extends Photo
	{
		public boolean isVisited = false;
		public boolean isNoise = false; 
		private Cluster cluster = null;
		
		
		public PhotoObjectForClustering(Photo p)
		{
			super(p.getTakenDate().toDate(), p.getWidth(), p.getHeight(), p.getLocation(), p.getFilePath());
		}
		
		public Cluster getClusterOfPointCluster(){
			return cluster;	
		}
	}
}
