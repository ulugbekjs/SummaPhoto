package Generator;

import org.junit.experimental.max.MaxCore;

import android.R.integer;
import Common.Photo;

/**
 * Represents a fixed empty space for a photo in a template
 * @author yonatan
 *
 */
public class Slot{

	private PixelPoint topLeft;
	private PixelPoint bottomRight;
	private PixelPoint topRight;
	private PixelPoint bottomLeft;

	private boolean horizontal;	
	private String path = null; // the photo that fills the slot

	public Slot(PixelPoint topLeft, PixelPoint bottomRight) {
		this.topLeft = topLeft;
		this.bottomRight = bottomRight;
		this.topRight = new PixelPoint(bottomRight.getX(), topLeft.getY());
		this.bottomLeft = new PixelPoint(topLeft.getX(), bottomRight.getY());
		this.horizontal = (getSlotWidth() > getSlotHeight()); 
	}

	public void assignToPhoto(Photo photo) {
		if (photo != null) {
			this.path = photo.getFilePath();
		}
	}

	public String getPhotoPath() {
		return this.path;
	}
	public boolean isAssignedToPhoto() {
		return (path != null);
	}

	public PixelPoint getTopLeft() {
		return this.topLeft;
	}

	public PixelPoint getTopRight() {
		return this.topRight;
	}

	public PixelPoint getBottomLeft() {
		return this.bottomLeft;
	}

	public PixelPoint getBottomRight() {
		return this.bottomRight;
	}

	public boolean isHorizontal() {
		return this.horizontal;
	}
	
	public double getSlotWidth() {
		return Math.abs(bottomRight.distanceFrom(new PixelPoint(topLeft.getX(), bottomRight.getY())));
	}

	public double getSlotHeight() {
		return Math.abs(bottomRight.distanceFrom(new PixelPoint(bottomRight.getX(), topLeft.getY())));
	}
	
	/**
	 * calculate minimum image size that respects original ratio and bigger than slot dimensions
	 * @param p - photo to calculate new size for
	 * @return [0] == width, [1] == height
	 */
	private int[] getProportionateDimensions(Photo p) {
	
		int bigger = (int) Math.max(getSlotWidth(), getSlotHeight());
		boolean widthBigger = 
		
	}



}
