package Partitioning;

import java.util.LinkedList;
import java.util.List;

import android.R.integer;
import Common.*;


public class DBScan {
	
	/*Parameters for deciding weather two pictures are "close" to each other as part
	 * of the DBScan algorithm
	 */
	private  final double MaxSecondsInterval = 600;	
	private  final double MaxMetersInterval = 50; 
	private  final int minNumberOfPointsInCluster = 2;
	
	private List<PhotoObjectForClustering> photosToCluster = null
	
	
	public DBScan (List<Photo> photosData)
	{
		photosToCluster = new LinkedList<DBScan.PhotoObjectForClustering>();
		if (photosData != null)
		{
			for (Photo p: photosData)
			{
				photosToCluster.add(new PhotoObjectForClustering(p));
			}
		}
		
	}
	
	public List<Cluster> runAlgorithmClusters ()
	{
		for (Photo p : photosData)
		{
			if (p != null)
			{
				unvisitedPhotos.add(new PhotoObjectForClustering(p));
			}
		}
		while (!unvisitedPhotos.isEmpty())
		{
			PhotoObjectForClustering p = unvisitedPhotos.get(0);
			unvisitedPhotos.remove(0);
			p.isVisited = true;
			visitedPhotos.add(p);
			neighborsList = 
			
		}
	}
	private boolean isEpsilonDistanced (PhotoObjectForClustering p1, PhotoObjectForClustering p2)
	{
		if ((p1.distanceFrom(p2) < MaxMetersInterval) && (p1.timeDeltaInSecondsFrom(p2) < MaxSecondsInterval))
				return true;
		return false;
	}
	
	private List<PhotoObjectForClustering> regionQueryList (PhotoObjectForClustering p)
	{
		List<PhotoObjectForClustering> photosEpsilonClose = new LinkedList<PhotoObjectForClustering>();
		for (PhotoObjectForClustering photoCandidate : photosForClustering) {
			if ((photoCandidate != null) && (isEpsilonDistanced(p, photoCandidate)))
			{
				photosEpsilonClose.add(photoCandidate);
			}
		}
		return photosEpsilonClose;
	}
	
	private class PhotoObjectForClustering extends Photo
	{
		public boolean isVisited = false;
		private Cluster cluster = null; 
		Photo photo = null;
		
		public PhotoObjectForClustering(Photo p)
		{
			super(p.getTakenDate().toDate(), p.getWidth(), p.getHeight(), p.getLocation(), p.getFilePath());
		}
		
		public Cluster getClusterOfPointCluster(){
			return cluster;	
		}
	}
}
