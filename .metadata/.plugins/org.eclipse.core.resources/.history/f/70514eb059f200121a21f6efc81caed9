package ActivationManager;

import java.util.Queue;
import Common.Photo;

public class ActivationManagerThread {

	private static final ActivationManagerThread instance = null;

	//states
	private static final int REGULAR_MODE = 0;
	private static final int DEDICATED_MODE = 1;

	private static final int BUFFER_SIZE = 100;
	private static final int CANDIDATE_EVENTS_FOR_COLLAGE = 5;
	private static final int NEW_CANDIDATE_THRESHOLD_SCORE = 5;

	//instance fields
	private Queue<Photo> buffer = new LimitedLinkedList<Photo>(BUFFER_SIZE);
	private int currentState = 0; // start in REGULAR_MODE;
	private int remainingEvents = CANDIDATE_EVENTS_FOR_COLLAGE;
	private int neededHorizontal = 0;
	private int neededVertical = 0;
	private int neededEvents = 0;


	private ActivationManagerThread() {
	}

	public static ActivationManagerThread getInstance() {
		return instance;
	}

	private double calculateCandidateScore(Photo newPhoto) {
		Photo lastPhoto = EventCandidateContainer.getInstance().getLastAddedEvent().getLastAddedPhoto();
		return (lastPhoto.distanceFrom(newPhoto) + lastPhoto.timeDeltaInSecondsFrom(newPhoto));
	}

	private boolean isNewEventCandidate(Photo newPhoto) {
		return (calculateCandidateScore(newPhoto) > NEW_CANDIDATE_THRESHOLD_SCORE) ? true : false;
	}

	private boolean isNeedingEvents() {
		return (neededEvents > 0);
	}
	
	private boolean isNeedingHorizontal() {
		return (neededHorizontal > 0);
	}
	
	private boolean isNeedingVertical() {
		return (neededVertical > 0);
	}
	
	private boolean isCollageNeeded() {
		return (remainingEvents == 0);
	}
	/**
	 * 
	 * @param photo
	 * @return TRUE if next module should be awakened
	 */
	public boolean processIncomingPhoto(List<Photo> bufferedPhotos) {

		int containerSize = EventCandidateContainer.getInstance().getEventCandidateCounter();

		if ((currentState == REGULAR_MODE) || (currentState == DEDICATED_MODE)) { // relevant for both modes

			EventCandidate event = null;
			if (EventCandidateContainer.getInstance().isEmpty() || isNewEventCandidate(photo)) {  // new event
				event = new EventCandidate(photo);
				EventCandidateContainer.getInstance().addEvent(event);
			}
			else  { // add photo to last added event in container
				event = EventCandidateContainer.getInstance().getLastAddedEvent();
				if (!event.isPhotoInEvent(photo)) {
					event.addPhoto(photo);
				}
				else {
					// TODO: handle this situation that should not happen
				}
			}
			
			if (isCollageNeeded())
				return true;
		}

		else if  (currentState == DEDICATED_MODE) { // DEDICATED_MODE
			int newContainerSize = EventCandidateContainer.getInstance().getEventCandidateCounter();
			
			if ((isNeedingEvents() && (newContainerSize - containerSize > 0)) 	// ActivationManager needs more events and new one was created
					|| (isNeedingHorizontal() && photo.isHorizontal()) // ActivationManager needs horizontal photos and new one was processed
					|| (isNeedingVertical() && !photo.isHorizontal())) {
				return true;
			}
			
		}
		
		// no collage is needed at this point
		return false;
	}
}

